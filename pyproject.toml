[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-mcp-server"
version = "0.1.0"
description = "A Model Context Protocol (MCP) server that provides RAG (Retrieval-Augmented Generation) capabilities for document querying"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Matteo", email = "your.email@example.com"}
]
maintainers = [
    {name = "Matteo", email = "your.email@example.com"}
]
keywords = ["mcp", "rag", "retrieval", "augmented", "generation", "llm", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "mcp>=1.9.2",
    "pydantic>=2.5.0",
    "aiohttp>=3.8.0",
    "langchain-google-genai",
    "langchain-mcp-adapters",
    "langgraph",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "starlette>=0.27.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "black",
    "pytest>=7.0.0",
    "pytest-asyncio",
    "pytest-cov",
    "mypy",
    "ruff",
    "pre-commit",
]
cli = [
    "mcp[cli]",
]

[project.urls]
Homepage = "https://github.com/yourusername/rag-mcp-server"
Repository = "https://github.com/yourusername/rag-mcp-server"
Documentation = "https://github.com/yourusername/rag-mcp-server#readme"
Issues = "https://github.com/yourusername/rag-mcp-server/issues"

[project.scripts]
rag-mcp-server = "src.server:main"
rag-mcp-client = "client.main:main"
rag-mcp-client-legacy = "client_wrapper:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "client*"]
exclude = ["tests*", "*.egg-info*"]

[tool.setuptools.package-dir]
"" = "."

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "langchain_google_genai.*",
    "langchain_mcp_adapters.*",
    "langgraph.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
